j'ai un serveur qui envois des noptifications d'event via des webhook afin de créé une petite animation de fête lors des sorties de one piece :


pages/api/webhook.ts


        import { NextApiRequest, NextApiResponse } from 'next';

        let latestChapter = { chapterNumber: 0, title: '' };

        export default function handler(req: NextApiRequest, res: NextApiResponse) {
        if (req.method === 'POST') {
            const { chapterNumber, title } = req.body;
            latestChapter = { chapterNumber, title };

            console.log(`Received notification for Chapter ${chapterNumber}: ${title}`);
            res.status(200).json({ message: 'Notification received' });
        } else {
            res.status(405).end(); // Method Not Allowed
        }
        }

        export function getLatestChapter() {
        return latestChapter;
        }



pages/index.tsx


import { useEffect, useState } from 'react';
import axios from 'axios';

export default function Home() {
  const [chapter, setChapter] = useState({ chapterNumber: 0, title: '' });
  const [animation, setAnimation] = useState(false);

  useEffect(() => {
    const fetchLatestChapter = async () => {
      try {
        const response = await axios.get('/api/latest-chapter');
        const data = response.data;
        if (data.chapterNumber !== chapter.chapterNumber) {
          setChapter(data);
          setAnimation(true);
          setTimeout(() => {
            setAnimation(false);
          }, 3000); // Animation duration
        }
      } catch (error) {
        console.error('Error fetching latest chapter:', error);
      }
    };

    const interval = setInterval(fetchLatestChapter, 5000); // Poll every 5 seconds

    return () => clearInterval(interval);
  }, [chapter]);

  return (
    <div>
      <h1>Latest Chapter Notification</h1>
      {animation && (
        <div className="animation">
          New Chapter Released: {chapter.chapterNumber} - {chapter.title}
        </div>
      )}
      <style jsx>{`
        .animation {
          animation: fadeInOut 3s;
        }

        @keyframes fadeInOut {
          0% { opacity: 0; }
          50% { opacity: 1; }
          100% { opacity: 0; }
        }
      `}</style>
    </div>
  );
}
